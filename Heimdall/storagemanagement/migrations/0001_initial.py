# Generated by Django 4.2.2 on 2023-11-10 22:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BookingBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('amount', models.IntegerField(blank=True, default=0, help_text='Menge der Buchung', null=True, verbose_name='Menge')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Preis des Artikels.', max_digits=12, null=True, verbose_name='Preis')),
                ('stock', models.PositiveIntegerField(blank=True, default=0, editable=False, help_text='Der aktuelle Bestand im Lager.', null=True, verbose_name='Bestand')),
                ('notice', tinymce.models.HTMLField(blank=True, help_text='Bemerkungen zum Prozess', null=True, verbose_name='Bemerkung')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CompanyContactBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('first_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Vorname')),
                ('last_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nachname')),
                ('notice', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Bemerkung')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CompanyContactEmailBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, help_text='Email-Adresse.', max_length=254, null=True, verbose_name='Email')),
                ('companycontact', models.ForeignKey(blank=True, help_text='Kontakt der zur Email gehört.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companycontactbasemodel_companycontact', to='storagemanagement.companycontactbasemodel', verbose_name='Kontakt')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CompanyContactTelephoneBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='Telefonnummer.', max_length=200, null=True, verbose_name='Telefonnummer')),
                ('types', models.IntegerField(choices=[(1, 'Telefon'), (2, 'Handy'), (3, 'Fax')], default=1, verbose_name='Typ')),
                ('companycontact', models.ForeignKey(blank=True, help_text='Kontakt der zur Telefonnummer gehört.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companycontacttelephonebasemodel_companycontact', to='storagemanagement.companycontactbasemodel', verbose_name='Kontakt')),
            ],
            options={
                'verbose_name': 'Telefonnummer',
                'verbose_name_plural': 'Telefonnummern',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OfferBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OfferDataBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('amount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Menge')),
                ('authorized', models.BooleanField(blank=True, default=None, help_text='Angebot wurde autorisiert.', null=True, verbose_name='Autorisiert')),
                ('authorized_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Autorisierung.', verbose_name='Zeitpunkt der Autorisierung.')),
                ('done', models.BooleanField(blank=True, default=False, help_text='Angebot wurde erledigt.', null=True, verbose_name='Erledigt')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Preis der Ware.', max_digits=12, null=True, verbose_name='Preis')),
                ('recived', models.BooleanField(blank=True, default=False, help_text='Bestellung angekommen.', null=True, verbose_name='Erhalten.')),
                ('recived_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des Erhalten der Bestellung.', verbose_name='Ankunft der Bestellung.')),
                ('sent', models.BooleanField(blank=True, default=False, help_text='Bestellung wurde rausgeschickt.', null=True, verbose_name='Bestellt.')),
                ('sent_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Bestellung.', verbose_name='Zeitpunkt der Bestellung.')),
                ('authorized_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Autorisierung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='offerdata_authorized_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Autorisierer')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('recived_user_id', models.ForeignKey(default=None, editable=False, help_text='Person die die Bestellung erhalten hat.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='offerdata_recived_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Person des Erhalten der Bestellung')),
                ('sent_user_id', models.ForeignKey(default=None, editable=False, help_text='Person die bestellt hat.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='offerdata_sent_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Besteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OrderBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OrderDataBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('amount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Menge')),
                ('amount_recived', models.PositiveIntegerField(blank=True, null=True, verbose_name='Erhaltene Menge')),
                ('authorized', models.BooleanField(blank=True, default=None, help_text='Bestellung wurde autorisiert.', null=True, verbose_name='Autorisiert')),
                ('authorized_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Autorisierung.', verbose_name='Zeitpunkt der Autorisierung.')),
                ('done', models.BooleanField(blank=True, default=False, help_text='Angebot wurde erledigt.', null=True, verbose_name='Erledigt')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Preis der Ware.', max_digits=12, null=True, verbose_name='Preis')),
                ('recived', models.BooleanField(blank=True, default=False, help_text='Bestellung angekommen.', null=True, verbose_name='Erhalten.')),
                ('sent_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des Erhalten der Bestellung.', verbose_name='Ankunft der Bestellung.')),
                ('sent', models.BooleanField(blank=True, default=False, help_text='Bestellung wurde rausgeschickt.', null=True, verbose_name='Bestellt.')),
                ('recived_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Bestellung.', verbose_name='Zeitpunkt der Bestellung.')),
                ('authorized_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Autorisierung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='orderdata_authorized_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Autorisierer')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('recived_user_id', models.ForeignKey(default=None, editable=False, help_text='Person die die Bestellung erhalten hat.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='orderdata_recived_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Person des Erhalten der Bestellung')),
                ('sent_user_id', models.ForeignKey(default=None, editable=False, help_text='Person die bestellt hat.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='orderdata_sent_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Besteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RequestDataBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('amount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Menge')),
                ('authorized', models.BooleanField(blank=True, default=None, help_text='Anfrage wurde autorisiert.', null=True, verbose_name='Autorisiert')),
                ('done', models.BooleanField(default=False, help_text='Bearbeitung der Anfrage Ja/Nein', verbose_name='Bearbeitet')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Preis der Ware.', max_digits=12, null=True, verbose_name='Preis')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='StorageBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('notice', tinymce.models.HTMLField(blank=True, help_text='Bemerkungen zum Prozess', null=True, verbose_name='Bemerkung')),
                ('unload_datetime', models.DateTimeField(blank=True, default=None, help_text='Zeitpunkt der Entnahme.', null=True, verbose_name='Zeitpunkt der Entnahme')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('unload_user_id', models.ForeignKey(blank=True, default=None, help_text='Person der Entnahme.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='storage_unload_user_id', to=settings.AUTH_USER_MODEL, verbose_name='Entnehmer')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('bookingbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.bookingbasemodel')),
            ],
            options={
                'verbose_name': 'Buchung',
                'verbose_name_plural': 'Buchungen',
                'ordering': [],
                'permissions': (('add_booking', 'Booking can view create'), ('change_booking', 'Booking can view change'), ('delete_booking', 'Booking can view delete'), ('detail_booking', 'Booking can view detail'), ('list_booking', 'Booking can view list'), ('table_booking', 'Booking can view table'), ('view_booking', 'Booking can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.bookingbasemodel',),
        ),
        migrations.CreateModel(
            name='CompanyContact',
            fields=[
                ('companycontactbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.companycontactbasemodel')),
            ],
            options={
                'verbose_name': 'Firmenkontakt',
                'verbose_name_plural': 'Firmenkontakte',
                'ordering': [],
                'permissions': (('add_companycontact', 'CompanyContact can view create'), ('change_companycontact', 'CompanyContact can view change'), ('delete_companycontact', 'CompanyContact can view delete'), ('detail_companycontact', 'CompanyContact can view detail'), ('list_companycontact', 'CompanyContact can view list'), ('table_companycontact', 'CompanyContact can view table'), ('view_companycontact', 'CompanyContact can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.companycontactbasemodel',),
        ),
        migrations.CreateModel(
            name='CompanyContactEmail',
            fields=[
                ('companycontactemailbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.companycontactemailbasemodel')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'default_permissions': (),
            },
            bases=('storagemanagement.companycontactemailbasemodel',),
        ),
        migrations.CreateModel(
            name='CompanyContactTelephone',
            fields=[
                ('companycontacttelephonebasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.companycontacttelephonebasemodel')),
            ],
            options={
                'verbose_name': 'Telefonnummer',
                'verbose_name_plural': 'Telefonnummern',
                'default_permissions': (),
            },
            bases=('storagemanagement.companycontacttelephonebasemodel',),
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('offerbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.offerbasemodel')),
            ],
            options={
                'verbose_name': 'Angebot',
                'verbose_name_plural': 'Angebote',
                'ordering': [],
                'permissions': (('add_offer', 'Offer can view create'), ('change_offer', 'Offer can view change'), ('delete_offer', 'Offer can view delete'), ('detail_offer', 'Offer can view detail'), ('list_offer', 'Offer can view list'), ('send_offer', 'Offer can send offer'), ('table_offer', 'Offer can view table'), ('view_offer', 'Offer can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.offerbasemodel',),
        ),
        migrations.CreateModel(
            name='OfferData',
            fields=[
                ('offerdatabasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.offerdatabasemodel')),
            ],
            options={
                'verbose_name': 'Angebot',
                'verbose_name_plural': 'Angebote',
                'ordering': [],
                'permissions': (('add_offerdata', 'OfferData can view create'), ('authorize_true_offerdata', 'OfferData can authorize true'), ('authorize_false_offerdata', 'OfferData can authorize false'), ('change_offerdata', 'OfferData can view change'), ('delete_offerdata', 'OfferData can view delete'), ('detail_offerdata', 'OfferData can view detail'), ('list_offerdata', 'OfferData can view list'), ('send_offerdata', 'OfferData can send offerdata'), ('table_offerdata', 'OfferData can view table'), ('view_offerdata', 'OfferData can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.offerdatabasemodel',),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('orderbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.orderbasemodel')),
            ],
            options={
                'verbose_name': 'Bestellung',
                'verbose_name_plural': 'Bestellungen',
                'ordering': [],
                'permissions': (('add_order', 'Order can view create'), ('change_order', 'Order can view change'), ('delete_order', 'Order can view delete'), ('detail_order', 'Order can view detail'), ('list_order', 'Order can view list'), ('table_order', 'Order can view table'), ('view_order', 'Order can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.orderbasemodel',),
        ),
        migrations.CreateModel(
            name='OrderData',
            fields=[
                ('orderdatabasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.orderdatabasemodel')),
            ],
            options={
                'verbose_name': 'Bestellung Artikel',
                'verbose_name_plural': 'Bestellung Artikel',
                'ordering': [],
                'permissions': (('add_orderdata', 'OrderData can view create'), ('authorize_true_orderdata', 'OrderData can authorize true'), ('authorize_false_orderdata', 'OrderData can authorize false'), ('change_orderdata', 'OrderData can view change'), ('delete_orderdata', 'OrderData can view delete'), ('detail_orderdata', 'OrderData can view detail'), ('list_orderdata', 'OrderData can view list'), ('table_orderdata', 'OrderData can view table'), ('view_orderdata', 'OrderData can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.orderdatabasemodel',),
        ),
        migrations.CreateModel(
            name='RequestData',
            fields=[
                ('requestdatabasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.requestdatabasemodel')),
            ],
            options={
                'verbose_name': 'Anfrage',
                'verbose_name_plural': 'Anfragen',
                'ordering': [],
                'permissions': (('add_requestdata', 'RequestData can view create'), ('authorize_true_requestdata', 'RequestData can authorize true'), ('authorize_false_requestdata', 'RequestData can authorize false'), ('change_requestdata', 'RequestData can view change'), ('delete_requestdata', 'RequestData can view delete'), ('detail_requestdata', 'RequestData can view detail'), ('list_requestdata', 'RequestData can view list'), ('table_requestdata', 'RequestData can view table'), ('view_requestdata', 'RequestData can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.requestdatabasemodel',),
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('storagebasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='storagemanagement.storagebasemodel')),
            ],
            options={
                'verbose_name': 'Lager',
                'verbose_name_plural': 'Lager',
                'ordering': [],
                'permissions': (('add_storage', 'Storage can view create'), ('change_storage', 'Storage can view change'), ('delete_storage', 'Storage can view delete'), ('detail_storage', 'Storage can view detail'), ('list_storage', 'Storage can view list'), ('table_storage', 'Storage can view table'), ('unload_storage', 'Storage can unload a Storage Item'), ('view_storage', 'Storage can view overview')),
                'default_permissions': (),
            },
            bases=('storagemanagement.storagebasemodel',),
        ),
        migrations.CreateModel(
            name='StorageItemBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('maximum', models.PositiveIntegerField(blank=True, default=0, help_text='Maximale Lagermenge.', null=True, verbose_name='Maximum')),
                ('minimum', models.PositiveIntegerField(blank=True, default=0, help_text='Minimale Lagermenge.', null=True, verbose_name='Minimum')),
                ('name', models.CharField(blank=True, help_text='Name des Artikels.', max_length=200, null=True, verbose_name='Name')),
                ('warning', models.PositiveIntegerField(blank=True, default=0, help_text='Warnung Lagermenge.', null=True, verbose_name='warning')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CompanyItemBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('image', models.FileField(blank=True, help_text='Bild des Artikels.', null=True, upload_to='storagemanagement/companyitem/', verbose_name='Bild')),
                ('name', models.CharField(blank=True, help_text='Name der Ware.', max_length=200, null=True, verbose_name='Name')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Preis der Ware.', max_digits=12, null=True, verbose_name='Preis')),
                ('unit', models.CharField(blank=True, choices=[('Stk', 'Stk'), ('mm', 'mm'), ('m', 'm'), ('km', 'km'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('t', 't'), ('ml', 'ml'), ('l', 'l')], default='Stk', help_text='Einheit der Ware.', max_length=3, null=True, verbose_name='Einheit')),
                ('item_number', models.CharField(blank=True, help_text='Warennummer der Ware.', max_length=200, null=True, verbose_name='Artikelnummer')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CompanyBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt der Erstellung.', verbose_name='Zeitpunkt der Erstellung')),
                ('reference_number', models.CharField(blank=True, default=None, editable=False, help_text='Referenznummer, mit der eine eindeutige Identifizierung ermöglicht wird.', max_length=200, null=True, verbose_name='Aktenzeichen')),
                ('slug', models.SlugField(default=None, editable=False, help_text='Slug, mit der eine eindeutige Identifizierung ermöglicht wird.', null=True, unique=True, verbose_name='Slug')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Zeitpunkt des letzten Updates.', verbose_name='Zeitpunkt des Updates')),
                ('city', models.CharField(blank=True, help_text='Stadt', max_length=200, null=True, verbose_name='Stadt')),
                ('country', models.CharField(blank=True, help_text='Land', max_length=200, null=True, verbose_name='Land')),
                ('email', models.EmailField(blank=True, help_text='Email Adresse der Firma.', max_length=254, null=True, verbose_name='Email')),
                ('house_number', models.CharField(blank=True, help_text='Hausnummer', max_length=200, null=True, verbose_name='Hausnummer')),
                ('logo', models.FileField(blank=True, help_text='Logo der Firma.', null=True, upload_to='storagemanagement/company/', verbose_name='Logo')),
                ('name', models.CharField(blank=True, help_text='Name der Firma.', max_length=200, null=True, verbose_name='Name')),
                ('notice', tinymce.models.HTMLField(blank=True, help_text='Nützliche Informationen über die Firma.', null=True, verbose_name='Bemerkung')),
                ('post_code', models.CharField(blank=True, help_text='Postleitzahl', max_length=200, null=True, verbose_name='Postleitzahl')),
                ('street', models.CharField(blank=True, help_text='Straße ohne Hausnummer', max_length=200, null=True, verbose_name='Straße')),
                ('telephone', models.CharField(blank=True, help_text='Telefonnummer der Firma', max_length=200, null=True, verbose_name='Telefon')),
                ('create_user_id', models.ForeignKey(default=None, editable=False, help_text='Person der Erstellung.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_create_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Ersteller')),
                ('update_user_id', models.ForeignKey(default=None, editable=False, help_text='Person des letzten Updates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)ss_update_user_id', related_query_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
            ],
            options={
                'verbose_name': 'Firma',
                'verbose_name_plural': 'Firmen',
                'ordering': [],
                'permissions': (('add_company', 'Company can view create'), ('change_company', 'Company can view change'), ('delete_company', 'Company can view delete'), ('detail_company', 'Company can view detail'), ('list_company', 'Company can view list'), ('table_company', 'Company can view table'), ('view_company', 'Company can view overview')),
                'proxy': True,
                'default_permissions': (),
                'indexes': [],
                'constraints': [],
            },
            bases=('storagemanagement.companybasemodel',),
        ),
        migrations.CreateModel(
            name='CompanyItem',
            fields=[
            ],
            options={
                'verbose_name': 'Firmenartikel',
                'verbose_name_plural': 'Firmenartikel',
                'ordering': [],
                'permissions': (('add_companyitem', 'CompanyItem can view create'), ('change_companyitem', 'CompanyItem can view change'), ('delete_companyitem', 'CompanyItem can view delete'), ('detail_companyitem', 'CompanyItem can view detail'), ('list_companyitem', 'CompanyItem can view list'), ('table_companyitem', 'CompanyItem can view table'), ('view_companyitem', 'CompanyItem can view overview')),
                'proxy': True,
                'default_permissions': (),
                'indexes': [],
                'constraints': [],
            },
            bases=('storagemanagement.companyitembasemodel',),
        ),
        migrations.CreateModel(
            name='StorageItem',
            fields=[
            ],
            options={
                'verbose_name': 'Lagerartikel',
                'verbose_name_plural': 'Lagerartikel',
                'ordering': [],
                'permissions': (('add_storageitem', 'StorageItem can view create'), ('change_storageitem', 'StorageItem can view change'), ('delete_storageitem', 'StorageItem can view delete'), ('detail_storageitem', 'StorageItem can view detail'), ('list_storageitem', 'StorageItem can view list'), ('table_storageitem', 'StorageItem can view table'), ('view_storageitem', 'StorageItem can view overview')),
                'proxy': True,
                'default_permissions': (),
                'indexes': [],
                'constraints': [],
            },
            bases=('storagemanagement.storageitembasemodel',),
        ),
        migrations.AddField(
            model_name='storageitembasemodel',
            name='companyitem',
            field=models.ForeignKey(blank=True, help_text='Artikel des Standardlieferanten', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='storageitem_companyitem', to='storagemanagement.companyitem', verbose_name='Standardartikel'),
        ),
        migrations.AddField(
            model_name='storagebasemodel',
            name='booking',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='storage_booking', to='storagemanagement.booking', verbose_name='Buchung'),
        ),
        migrations.AddField(
            model_name='storagebasemodel',
            name='companyitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='storage_companyitem', to='storagemanagement.companyitem', verbose_name='Artikel'),
        ),
        migrations.AddField(
            model_name='requestdatabasemodel',
            name='companyitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='requestdata_companyitem', to='storagemanagement.companyitem', verbose_name='Item'),
        ),
        migrations.AddField(
            model_name='requestdatabasemodel',
            name='storageitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='requestdata_storageitem', to='storagemanagement.storageitem', verbose_name='Item'),
        ),
        migrations.AddField(
            model_name='orderdatabasemodel',
            name='companyitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orderdata_companyitem', to='storagemanagement.companyitem', verbose_name='Item'),
        ),
        migrations.AddField(
            model_name='orderdatabasemodel',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orderdata_order', to='storagemanagement.order', verbose_name='Bestellung'),
        ),
        migrations.AddField(
            model_name='orderdatabasemodel',
            name='storageitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orderdata_storageitem', to='storagemanagement.storageitem', verbose_name='Item'),
        ),
        migrations.AddField(
            model_name='offerdatabasemodel',
            name='companyitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offerdata_companyitem', to='storagemanagement.companyitem', verbose_name='Item'),
        ),
        migrations.AddField(
            model_name='offerdatabasemodel',
            name='offer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offerdata_offer', to='storagemanagement.offer', verbose_name='Angebot'),
        ),
        migrations.AddField(
            model_name='offerdatabasemodel',
            name='storageitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offerdata_storageitem', to='storagemanagement.storageitem', verbose_name='Item'),
        ),
        migrations.AddField(
            model_name='companyitembasemodel',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companyitem_company', to='storagemanagement.company', verbose_name='Firma'),
        ),
        migrations.AddField(
            model_name='companyitembasemodel',
            name='storageitem',
            field=models.ForeignKey(blank=True, help_text='Artikel im eigenen Lager.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companyitem_storageitem', to='storagemanagement.storageitem', verbose_name='Lagerartikel'),
        ),
        migrations.AddField(
            model_name='companycontactbasemodel',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companycontact_company', to='storagemanagement.company', verbose_name='Firma'),
        ),
        migrations.AddField(
            model_name='bookingbasemodel',
            name='companyitem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_companyitem', to='storagemanagement.companyitem', verbose_name='Artikel'),
        ),
    ]
